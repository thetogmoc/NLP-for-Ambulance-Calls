# -*- coding: utf-8 -*-
"""Parametric_Pairamedics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jRB-d4xWnSm4MBRQa_TjfuM2rP7P2ezp
"""

!pip install gensim # Install gensim package

# !wget https://github.com/eyaler/word2vec-slim/raw/master/GoogleNews-vectors-negative300-SLIM.bin.gz  #Downloads the raw word2vec file in zip format
# !gunzip GoogleNews-vectors-negative300-SLIM.bin.gz #Unzip
# http://nlp.stanford.edu/data/glove.6B.zip
# import os
# os.remove('GoogleNews-vectors-negative300-SLIM.bin.gz.1')
# os.listdir('.')

#data = ['EMS: BACK PAINS/INJURY', '	EMS: DIZZINESS', '1ST TRIMESTER HEMORRHAGE OR MISCARRIAGE']

data = ['she has a wound']

mpds_protocol = ['ABDOMINAL PAIN/PROBLEMS',
'ALLERGIES / ENVENOMATINOS',
'ANIMAL BITES / ATTACKS',
'ASSAULT / SEXUAL ASSAULT',
'BACK PAIN (NON-TRAUMATIC NON-RECENT)',
'BREATHING PROBLEMS',
'BURNS / EXPLOSION',
'CARBON MONOXIDE/INHALATION/HAZMAT/CBRN',
'CARDIAC RESPIRATORY ARREST / DEATH',
'CHEST PAIN (NON TRAUMATIC)',
'CHOKING',
'CONVULSIONS / SEIZURES',
'DIABETIC PROBLEMS',
'DROWNING/DIVING/SCUBA ACCIDENT',
'ELECTROCUTION / LIGHTNING',
'EYE PROBLEMS / INJURIES',
'FALLS',
'HEADACHE']

keywords = ['NOT ALERT',
'SUSPECTED AORTIC ANEURYSM >= 50 years',
'KNOWN AORTIC ANEURYSM',
'FAINTING OR NEAR FAINTING>= 50 years',
'FEMALES WITH FAINTING OR NEAR FAINTING 12-50 years',
'MALES WITH PAIN ABOVE NAVEL >= 35 years',
'FEMALES WITH PAIN ABOVE NAVEL >= 45 years',
'ABDOMINAL PAIN',
'INEFFECTIVE BREATHING',
'DIFFICULTY SPEAKING BETWEEN BREATHS',
'SWARMING ATTACK',
'SNAKEBITE',
'DIFFICULTY BREATHING OR SWALLOWING',
'HISTORY OF SEVERE ALLERGIC REACTION',
'UNKNOWN STATUS/OTHER CODES NOT APPLICABLE',
'NO DIFFICULTY BREATHING OR SWALLOWING (RASH, HIVES OR ITCHING)',
'SPIDER BITE',
'UNCONSCIOUS OR ARREST',
'CHEST OR NECK INJURY (DIFFICULTY BREATHING)',
'DANGEROUS BODY AREA',
'LARGE ANIMAL',
'EXOTIC ANIMAL',
'ATTACK OF MULTIPLE ANIMALS',
'POSSIBLY DANGEROUS BODY AREA',
'SERIOUS HEMORRHAGE',
'NOT DANGEROUS BODY AREA',
'NON-RECENT (>= 6 hours) INJURIES',
'SUPERFICIAL BITES',
'MULTIPLE VICTIMS',
'NON-TRAUMATIC BACK PAIN',
'NON-RECENT (>= 6 hours) TRAUMATIC BACK PAIN',
'CHANGING COLOR',
'CLAMMY',
'ABNORMAL BREATHING',
'PERSON ON FIRE',
'BUILDING FIRE WITH PERSONS REPORTED INSIDE',
'BURNS >= 18% BODY AREA',
'SIGNIFICANT FACIAL BURNS',
'BLAST INJURIES (WITHOUT PRIORITY SYMPTOMS)',
'BURNS <18% BODY AREA',
'FIRE ALARM (UNKNOWN SITUATION)',
'SUNBURN OR MINOR BURNS',
'ALERT WITH DIFFICULTY BREATHING',
'ALERT WITHOUT DIFFICULTY BREATHING',
'CARBON MONOXIDE DETECTOR ALARM (WITHOUT PRIORITY)',
'NOT BREATHING AT ALL',
'BREATHING UNCERTAIN (AGONAL)',
'HANGING',
'STRANGULATION',
'SUFFOCATION',
'UNDERWATER',
'OBVIOUS OR EXPECTED DEATH QUESTIONABLE',
'OBVIOUS DEATH QUESTIONABLE',
'EXPECTED DEATH QUESTIONABLE',
'HEART ATTACK OR ANGINA HISTORY',
'COCAINE',
'BREATHING NORMALLY >= 35 YEARS',
'BREATHING NORMALLY < 35 YEARS',
'COMPLETE OBSTRUCTION / INEFFECTIVE BREATHING',
'ABNORMAL BREATHING (PARTIAL OBSTRUCTION)',
'NOT CHOKING NOW (CAN TALK OR CRY)',
'NOT BREATHING',
'CONTINUOUS OR MULTIPLE SEIZURES',
'AGONAL / INEFFECTIVE BREATHING',
'EFFECTIVE BREATHING NOT VERIFIED >=35 YEARS',
'FOCAL SEIZURE (NOT ALERT)',
'PREGNANCY',
'DIABETIC',
'NOT SEIZING NOW AND EFFECTIVE BREATHING VERIFIED',
'HISTORY OF STROKE OR BRAIN TUMOR',
'OVERDOSE / POISONING (INGESTION)',
'ATYPICAL SEIZURE',
'EFFECTIVE BREATHING NOT VERIFIED < 35 YEARS',
'NOT SEIZING NOW AND EFFECTIVE BREATHING VERIFIED (KNOWN SEIZURE DISORDER',
'NOT SEIZING NOW AND EFFECTIVE BREATHING VERIFIED (SEIZURE DISORDER UNKNOWN)',
'NOT SEIZING NOW AND EFFECTIVE BREATHING VERIFIED (<= 6 YEARS OLD, CONFIRMED NO SEIZURE DISORDER)',
'FOCAL SEIZURE (ALERT)',
'IMPENDING SEIZURE (AURA)',
'UNCONSCIOUS',
'ABNORMAL BEHAVIOR',
'ALERT AND BEHAVING NORMALLY',
'DIVING OR SUSPECTED NECK INJURY',
'SCUBA ACCIDENT',
'ALERT WITH ABNORMAL BREATHING',
'ALERT OR BREATHING NORMALLY (INJURIES OR IN WATER)',
'ALERT AND BREATHING NORMALLY (NO INJURIES OUT OF WATER)',
'NOT BREATHING / INEFFECTIVE BREATHING',
'NOT DISCONNECTED FROM POWER',
'POWER NOT OFF OR HAZARD PRESENT',
'EXTREME FALL >= 10 M / 30 FT',
'LONG FALL',
'ALERT AND BREATHING NORMALLY',
'SEVERE EYE INJURIES',
'MODERATE EYE INJURIES',
'MINOR EYES INJURIES',
'MEDICAL EYE PROBLEMS',
'EXTREME FALL( >= 30 FT/10 M)',
'NON-RECENT (>= 6) INJURIES WITHOUT PRIORITY SYMPTOMS',
'PUBLIC ASSIST NO INJURIES NO PRIORITY SYMPTOMS',
'SPEECH PROBLEMS',
'SUDDEN ONSET OF SEVERE PAIN',
'NUMBNESS',
'PARALYSIS',
'CHANGE IN BEHAVIOR',
'BREATHING NORMALLY',
'DIABETIC EMERGENCY']

!wget https://github.com/eyaler/word2vec-slim/raw/master/GoogleNews-vectors-negative300-SLIM.bin.gz  #Downloads the raw word2vec file in zip format
!gunzip GoogleNews-vectors-negative300-SLIM.bin.gz #Unzip

import gensim
model = gensim.models.KeyedVectors.load_word2vec_format('GoogleNews-vectors-negative300-SLIM.bin', binary=True) #Create model from word2vec file

print(model.most_similar('hello')) #Find words most similar to given word
print(model.similarity('man', 'woman')) #Find cosine similarity between the 2 words i.e. from 0-1 how close they are, with 1 being most

import nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
from nltk import word_tokenize

pos = nltk.pos_tag(text)
# print(pos)
wanted_tags = ['NN', 'NNS', 'NNP', 'NNPS', 'VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ']
pos_tags = [item for item in pos if item[1] in wanted_tags]
nv_words = []
for item in pos_tags:
   nv_words.append(item[0])
# print(nv_words)

#declaring variables
max_avg = 0
max_label = ''
sum_cos = 0 
count = 0
labelswords = []
word_call_list = []
labelswords2 = []
exit = 'false'

for call in data:  #for each call in the dataset
  call_tokens = word_tokenize(call)  #
  call_pos = nltk.pos_tag(call_tokens) #finds the pos and stores it in a list
  call_words = [item[0].lower() for item in call_pos if item[1] in wanted_tags]
  print(call_words)
  sum_cos = 0
  count = 0
  exit = 'false'
  max_label = ''
  for word_call in call_words:
    word_call_list = []
    for labels in keywords:
      labels = word_tokenize(labels)
      labelswords = []
      count = 0
      sum_cos = 0
      for word_mpds in labels:
        if word_mpds.isalpha() and word_mpds != '>' and word_mpds != 'of' and word_mpds != 'and' and word_mpds != 'a'and word_mpds != 'monixide':
          labelswords.append(word_mpds.lower())
      word_call_list.append(word_call)
      common = set(labelswords).intersection(set(word_call_list))
      if len(common) > 0:
        max_label = labels 
        exit = 'true'
      else:
        for word_mpds in labels:
          try:
            callcorrelation = model.similarity(word_call, word_mpds.lower())
            if callcorrelation > 0.2 or callcorrelation < -0.2: 
              sum_cos += callcorrelation
              count += 1
          except KeyError:
            continue  
      if count == 0:
         count = 1
      avg = sum_cos/count
      if avg >= max_avg:
        max_avg = avg
        max_label = labels
      if exit == 'true':
        break
  print('Matching label for ', call, 'is ', max_label)
  print (max_avg)



itemB

print(keywordstext)

